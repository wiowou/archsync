#!/usr/bin/python3

import sys
import os
from datetime import date as dt
from functools import total_ordering

#total_ordeering
class Arrival:
    def __init__(self, qty, date, vendor):
        self.qty = qty
        self.date = date
        self.vendor = vendor

    def __add__(self, other):
        return self.qty + other.qty

    def __radd__(self, other):
        if isinstance(other, int) or isinstance(other, float):
            return self.qty + other
        return self.__add__(other)

    def __eq__(self, other):
        return (self.date, self.vendor, self.qty) == (other.date, other.vendor, other.qty)

    def __ne__(self, other):
        return not (self == other)
    
    def __lt__(self, other):
        return (self.date, self.vendor, self.qty) < (other.date, other.vendor, other.qty)

    def __str__(self):
        return str(self.qty) + ' ' + str(self.date) + ' ' + str(self.vendor)

class Food:
    def __init__(self, path, level=0):
        self.level = level
        self.title = None
        self.units = None
        self.stocked = []
        self.used = []
        self.arriving = []
        self.foods = []
        self.path = path
        self._parse(path)

    def _is_category(self):
        return len(self.stocked) + len(self.used) + len(self.arriving) == 0 

    def _parse(self, path):
        if os.path.isfile(path):
            self.title = os.path.basename(path).split('.')[0]
            f = open(path, 'r')
            lines = f.read().splitlines()
            f.close()
            is_arrival = False
            is_used = False
            is_stocked = False
            for line in lines:
                if len(line) < 1:
                    continue
                if line[0] == '#':
                    self.units = line[1:].strip()
                    continue
                elif 'purchased' in line.lower():
                    is_used = False
                    is_arrival = False
                    is_stocked = True 
                    continue
                elif 'used' in line.lower():
                    is_used = True
                    is_arrival = False
                    is_stocked = False
                    continue
                elif 'arriving' in line.lower():
                    is_used = False
                    is_arrival = True
                    is_stocked = False 
                    continue
                if is_used:
                    words = line.split()
                    self.used.append(float(words[0].strip()))
                elif is_stocked:
                    self.stocked.append(float(line.strip()) )
                elif is_arrival:
                    words = line.split()
                    qty = float(words[0].strip())
                    arrival_date = dt.today()
                    vendor = 'Vendor_unknown'
                    if len(words) > 1:
                        arrival_date = dt.fromisoformat(words[1].strip())
                    if len(words) > 2:
                        vendor = words[2].strip()
                    if arrival_date > dt.today():
                        arrival = Arrival(qty, arrival_date, vendor)
                        self.arriving.append(arrival)
                    else:
                        self.stocked.append(qty)
        elif os.path.isdir(path):
            self.title = os.path.basename(path)
            paths = os.listdir(path)
            paths.sort()
            for path in paths:
                if 'example' in path:
                    continue
                self.foods.append(Food(os.path.join(self.path, path), self.level + 1 ) )
    
    def __str__(self):
        spaces = ''
        if self.level > 0:
            spaces = '  '*self.level
        
        def _line(content):
            return spaces + content + '\n'
        
        ret = _line(self.title.upper())
        if not self._is_category():
            ret = ret[:-1]
            ret += ' (' + self.units + ')\n'
            spaces += ' '
            avail = sum(self.stocked) - sum(self.used)
            ret += _line(str(round(float(avail), 1) ) + ' Available' )
            pending = sum(self.arriving)
            ret += _line(str(round(float(pending), 1) ) + ' Total Arriving' )
            if len(self.arriving) > 0:
                ret += _line('      Arrival Summary')
            for arrival in self.arriving:
                ret += _line(str(arrival))
            ret += '\n'
        else:
            if len(self.foods) == 0:
                ret += '\n'
        
        for food in self.foods:
            ret += str(food)
        return ret

if __name__ == '__main__':
    path = os.getcwd()
    if len(sys.argv) == 2:
        path = os.path.join(path, sys.argv[1])
    food = Food(path)
    print(food)



